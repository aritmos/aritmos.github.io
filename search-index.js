var searchIndex = JSON.parse('{\
"sudoxu":{"doc":"Sudoxu","t":"AAADLLLLLLLLLLLIIIIKKKKKAAAAAAAAAAADLLLLLLLLLLLLLLRNEDDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLMLLLLLNDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGDGIGILLLLLLLLLLLLLLLLLLLLLLLLDENNLLLLLLLLLLLLLLLLLLLLLLLNNNDDEDLLLLLLLLMLLLLLLLLLLLLLLLLLLMMLLLLMLLLLLLLLLLLLLLLLLARR","n":["board","solver","solvers","Board","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_from","try_into","type_id","LoggingSolver","Solver","StepLoggingSolver","StepSolver","init","solve","solve_with_logs","step","step","btr","psr","utils","core","area","cell","filter","grid","idx","num","section","FoldedArea","apply_masks","borrow","borrow_mut","count","double_lines","from","get_filters","into","new","single_lines","try_from","try_into","type_id","update_known","ALL_CANDIDATES","BannedBits","CandidateError","Cell","CellMask","KnownMultipleNum","KnownNoNum","MultipleUniqueCandidates","NoCandidates","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","eq","equivalent","fmt","fmt","fmt","from","from","from","from_known","into","into","into","is_known","new","new","new_known","new_unchecked","new_unchecked","remove_candidates","set_candidates","set_known_bit","single_candidate","to_owned","to_owned","to_owned","to_string","to_u16","to_u16","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zeroed","Filter","borrow","borrow_mut","clone","clone_into","from","idx","into","mask","new","to_owned","try_from","try_into","type_id","FromStringError","Grid","GridError","apply_filter","apply_filters","borrow","borrow","borrow_mut","borrow_mut","default","eq","equivalent","fmt","fmt","from","from","from","get_cell","get_cell_mut","get_folded_area","get_section","get_sections","into","into","known_filters","try_from","try_from","try_into","try_into","type_id","type_id","unique_candidate","AreaIdx","GridIdx","Idx","InnerIdx","IntoIdx","SectionIdx","TryIntoIdx","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","inner_idxs","inner_idxs","into","new","new_unchecked","section_idxs","section_idxs","to_box_section_idxs","to_box_section_idxs","to_idx","to_owned","to_string","try_from","try_into","try_to_idx","type_id","Num","NumErr","TooBig","Zero","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","from","from","into","into","new","new_unchecked","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Box","Column","Row","Section","SectionInfo","SectionKind","SimdSection","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cells","clone","clone","clone","clone_into","clone_into","clone_into","contains_mask","eq","eq","fmt","fmt","fmt","from","from","from","from","from","grid_idxs","idx","info","into","into","into","into","kind","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unique_candidate","boards","SUDOKU_1_UNSOLVED_FMT_STR","SUDOKU_1_UNSOLVED_STR"],"q":[[0,"sudoxu"],[3,"sudoxu::board"],[15,"sudoxu::solver"],[24,"sudoxu::solvers"],[27,"sudoxu::solvers::psr"],[28,"sudoxu::solvers::psr::core"],[35,"sudoxu::solvers::psr::core::area"],[50,"sudoxu::solvers::psr::core::cell"],[112,"sudoxu::solvers::psr::core::filter"],[126,"sudoxu::solvers::psr::core::grid"],[158,"sudoxu::solvers::psr::core::idx"],[189,"sudoxu::solvers::psr::core::num"],[216,"sudoxu::solvers::psr::core::section"],[274,"sudoxu::solvers::utils"],[275,"sudoxu::solvers::utils::boards"],[277,"core::fmt"],[278,"core::fmt"],[279,"core::result"],[280,"core::any"],[281,"core::option"],[282,"core::convert"]],"d":["I/O representation of sudoku boards.","The root <code>Solver</code> trait, implemented for all types which can …","Sudoku solver categories and utilities.","I/O version of the sudoku board. Each byte is guaranteed …","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Parses a <code>String</code> into a Board. The parsing ignores any <code>char</code>…","","","","A solver which logs its solution to the sudoku.","A sudoku solver.","A solver that steps through its process of solving the …","A sudoku solver that shows its steps into solving the …","Initialize <code>self</code> from a Board.","Compute the solution and return the solved board.","Solves the board while producing logs of each step.","Computes the following step towards solving the sudoku. …","Solves the board one step a time.","Backtracking (BTR) Solvers","Phase Space Reduction (PSR) Solvers","Utilities common to all solver categories, such as testing.","Core functionality for PSR solvers.","Adjacent <code>Sections</code> forming a third of the board.","The cells in a sudoku grid.","Filter type, used to remove candidates from <code>Cells</code>.","The sudoku board.","Safe indexing into comptime known arrays.","Representation of a known number within a <code>Cell</code>: <code>1 &lt;= N &lt;= 9</code>…","A row, column, or box within the grid.","An <code>Area</code> whose squares have been projected into columns. …","Applies the current masks to itself. Used after masks have …","","","Creates a mask representing if each candidate within a …","Checks for candidate projections in double lines. Updates …","Returns the argument unchanged.","Turns inner masks into Filters. Some filters may be …","Calls <code>U::from(self)</code>.","Creates a new <code>FoldedArea</code>.","Checks for candidate projections in single lines. Returns …","","","","Uses the <code>Grid</code> to try to filter candidates further. …","Inner value of a <code>Cell</code> representing all candidates being …","Bits set within the banned sector.","Errors relating to a Cell’s candidates.","A cell within the grid. Holds information about what …","Used to remove multiple candidates from a <code>Cell</code>. Will …","Known bit is set but multiple candidates are also set.","Known bit is set but no candidates are set.","Cell has multiple unique candidates within its Sections. …","Cell contains no candidates/value.","","","","","","","Checks if a given <code>Cell</code> has an allowed representation.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>CellMask</code> with an inner <code>u16</code> equal to that of a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether the known bit is set.","Creates a new <code>Cell</code> from an inner <code>u16</code>. Returns a …","Creates a <code>CellMask</code> from a <code>u16</code>. Returns <code>None</code> if bits …","Creates a Cell with a known value from a Num.","Creates a new <code>Cell</code>, which can either contain multiple …","Creates a <code>CellMask</code> from a <code>u16</code>. Does not check the …","Removes the candidate bits set in the mask from the cell.","Adds the set candidate bits in the <code>CellMask</code> to the <code>Cell</code>.","Sets the known bit of the given cell.","Checks if a <code>Cell</code> is not known and only contains a single …","","","","","Returns the inner <code>u16</code> within the Cell.","Returns the inner <code>u16</code>.","","","","","","","","","","Wrapper for <code>Cell::new_unchecked(0)</code>","A <code>CellMask</code> and <code>GridIdx</code> pair. Used for removing candidates …","","","","","Returns the argument unchanged.","The <code>Cell</code>’s <code>GridIdx</code> where the mask should be applied.","Calls <code>U::from(self)</code>.","The <code>CellMask</code> to apply.","Creates a new <code>Filter</code>.","","","","","Error in parsing a <code>String</code> into a <code>Grid</code>.","The sudoku board for PSR solvers.","Grid-related errors","Remove candidates at the specified location.","Remove candidates at the specified locations in the Grid. …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get a copy of the <code>Cell</code> the given index.","Get a mutable reference to the <code>Cell</code> at the given index.","Constructs the <code>FoldedArea</code> at the location specified by the …","Returns (a copy of) the specified <code>Section</code>.","Returns (copies of) the <code>Sections</code> of the <code>Cell</code> at the given …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates filters for the neighbours of a cell when its …","","","","","","","Checks if a <code>Cell</code> contains a unique candidate within its …","An index into the <code>Area</code>s of the grid.","An index into the cells of a grid:","A generic indexing type used to safely access comptime …","An index into a <code>Section</code>’s inner Cells. For rows(columns) …","Unsafe uint -&gt; Idx conversion.","An index into the sections of a grid. For rows and …","Safe uint -&gt; Idx conversion.","","","","","","","","Returns the argument unchanged.","Returns the <code>InnerIdx</code>s associated to the given <code>GridIdx</code>, …","Returns the <code>InnerIdx</code>s associated to the given <code>GridIdx</code>, …","Calls <code>U::from(self)</code>.","Tries to create an <code>Idx&lt;N&gt;</code> from a <code>uint</code>. Returns None if the …","Create an <code>Idx&lt;N&gt;</code> from a <code>usize</code>.","Returns the <code>SectionIdx</code>s associated to the given <code>GridIdx</code>, …","Returns the <code>SectionIdx</code>s associated to the given <code>GridIdx</code>, …","Returns the three <code>SectionIdxs</code> of the three boxes that make …","Returns the three <code>SectionIdxs</code> of the three boxes that make …","Casts a uint into an <code>Idx&lt;N&gt;</code>, without performing the bounds …","","","","","Tries to cast a uint into an <code>Idx&lt;N&gt;</code>. Returns <code>None</code> if <code>self</code> …","","A known number within a <code>Cell</code>, satisfying <code>1 &lt;= N &lt;= 9</code>.","<code>Num</code>-related errors.","<code>n &gt; 9</code>","<code>n == 0</code>","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a <code>Num</code> from a <code>u8</code>. Returns an error if <code>n</code> is not in …","Creates a <code>Num</code> from a <code>u8</code>. Does not apply the bounds check.","","","","","","","","Box: 3x3 square within the grid.","Column: Vertical line within the grid.","Row: Horizontal line within the grid.","A row, column, or box of <code>Cells</code>.","Information to identify a Section within the grid.","An enum for representing the kinds of <code>Sections</code>.","A SIMD-compatible version of a Section.","","","","","","","","","The underlying array of <code>Cells</code>.","","","","","","","Checks inner <code>Cells</code> for containing <code>n</code> as a candidate, and …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the grid indexes of the provided section.","What (section) index is it.","The information linking to what <code>Section</code> within the <code>Grid</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","What kind of <code>Section</code> is it.","Create a new <code>SectionInfo</code>.","","","","","","","","","","","","","","","","Finds if the <code>Cell</code> at <code>inner_idx</code> contains a candidate found …","I/O Boards to test solvers and formatting.","Board 01 unsolved as <code>board.to_string()</code>.","Board 01 unsolved as input <code>&amp;str</code>."],"i":[0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,33,33,34,35,36,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,16,0,0,0,16,16,16,16,15,16,17,15,16,17,15,15,16,17,15,16,17,15,15,16,15,15,15,16,15,16,17,17,15,16,17,15,15,17,15,15,17,15,15,15,15,15,16,17,15,15,17,15,16,17,15,16,17,15,16,17,15,0,12,12,12,12,12,12,12,12,12,12,12,12,12,21,0,0,14,14,14,21,14,21,14,14,14,14,21,14,14,21,14,14,14,14,14,14,21,14,14,21,14,21,14,21,14,0,0,0,0,0,0,0,24,24,24,24,24,24,24,24,19,24,24,24,24,19,24,13,24,37,24,24,24,24,38,24,0,0,29,29,18,29,18,29,18,18,18,18,18,29,18,29,18,29,18,18,18,18,29,18,29,18,29,31,31,31,0,0,0,0,32,23,22,31,32,23,22,31,23,23,22,31,23,22,31,32,22,31,23,22,31,32,32,23,22,31,22,22,23,32,23,22,31,22,22,23,22,31,32,23,22,31,32,23,22,31,32,23,22,31,23,0,0,0],"f":[0,0,0,0,[[]],[[]],[[1,2],3],[[1,2],3],[[]],[[]],[[],4],[4,[[5,[1]]]],[[],5],[[],5],[[],6],0,0,0,0,[1],[[],1],[[]],[[],[[7,[1]]]],[[],7],0,0,0,0,0,0,0,0,0,0,0,0,[8],[[]],[[]],[8,[[10,[9]]]],[8,11],[[]],[8,[[10,[12]]]],[[]],[[[10,[[10,[9]]]],[10,[9]],13],8],[8,11],[[],5],[[],5],[[],6],[[8,14],11],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[15,[[5,[16]]]],[15,15],[16,16],[17,17],[[]],[[]],[[]],[[],15],[[15,15],11],[[16,16],11],[[],11],[[15,2],3],[[15,2],3],[[16,2],3],[[]],[[]],[[]],[18,17],[[]],[[]],[[]],[15,11],[9,[[5,[15,16]]]],[9,[[7,[17]]]],[18,15],[9,15],[9,17],[[15,17]],[[15,17]],[15],[15,[[7,[18]]]],[[]],[[]],[[]],[[],4],[15,9],[17,9],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],15],0,[[]],[[]],[12,12],[[]],[[]],0,[[]],0,[[17,19],12],[[]],[[],5],[[],5],[[],6],0,0,0,[[14,12]],[[14,[20,[12]]]],[[]],[[]],[[]],[[]],[[],14],[[14,14],11],[[],11],[[14,2],3],[[21,2],3],[1,14],[[]],[[]],[[14,19],15],[[14,19],15],[[14,13],8],[[14,22],23],[[14,19],[[10,[23]]]],[[]],[[]],[[18,19],[[10,[12]]]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[14,19],[[5,[[7,[18]],16]]]],0,0,0,0,0,0,0,[[]],[[]],[24,24],[[]],[[24,24],11],[[24,2],3],[[24,2],3],[[]],[19,[[10,[25]]]],[24,[[10,[25]]]],[[]],[[[27,[26]]],[[7,[24]]]],[[[27,[26]]],24],[19,[[10,[28]]]],[24,[[10,[28]]]],[13,[[10,[28]]]],[24,[[10,[28]]]],[[],24],[[]],[[],4],[[],5],[[],5],[[],[[7,[24]]]],[[],6],0,0,0,0,[[]],[[]],[[]],[[]],[18,18],[[]],[[18,18],11],[[],11],[[18,2],3],[[29,2],3],[[]],[[]],[[]],[[]],[30,[[5,[18,29]]]],[30,18],[[]],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[23,23],[22,22],[31,31],[[]],[[]],[[]],[[32,18],9],[[22,22],11],[[31,31],11],[[23,2],3],[[22,2],3],[[31,2],3],[[]],[23,32],[[]],[[]],[[]],[22,[[10,[19]]]],0,0,[[]],[[]],[[]],[[]],0,[[31,28],22],[[]],[[]],[[]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],6],[[],6],[[],6],[[],6],[[23,25],[[5,[[7,[18]],16]]]],0,0,0],"c":[],"p":[[3,"Board",3],[3,"Formatter",277],[6,"Result",277],[3,"String",278],[4,"Result",279],[3,"TypeId",280],[4,"Option",281],[3,"FoldedArea",35],[15,"u16"],[15,"array"],[15,"bool"],[3,"Filter",112],[6,"AreaIdx",158],[3,"Grid",126],[3,"Cell",50],[4,"CandidateError",50],[3,"CellMask",50],[3,"Num",189],[6,"GridIdx",158],[15,"slice"],[4,"GridError",126],[3,"SectionInfo",216],[3,"Section",216],[3,"Idx",158],[6,"InnerIdx",158],[15,"usize"],[8,"Into",282],[6,"SectionIdx",158],[4,"NumErr",189],[15,"u8"],[4,"SectionKind",216],[3,"SimdSection",216],[8,"Solver",15],[8,"LoggingSolver",15],[8,"StepSolver",15],[8,"StepLoggingSolver",15],[8,"IntoIdx",158],[8,"TryIntoIdx",158]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
