var searchIndex = JSON.parse('{\
"sudoxu":{"doc":"Sudoxu","t":"AAAAODENLLLLLLLLLLLLLLLLLLLLLCCIIIIKKFKKKAAAADDLLLLLLLLLLLLLLLLLLLLLLAAAAAAAADLLLLLLLLLLLLLLRNEDDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLMLMLLLLLNDELLLLLLLLLLLLLLLLLLLLLLLLLLLLLGGDGIGILLLLLLLLLLLLLLLLLLLLLLLLDENNLLLLLLLLLLLLLLLLLLLLLLLNNNDDEDLLLLLLLLMLLLLLLLLLLLLLLLLLLMMLLLLMLLLLLLLLLLLLLLLLLAARRRO","n":["board","prelude","solver","solvers","time","Board","BoardError","FromStrError","borrow","borrow","borrow_mut","borrow_mut","dbg","fmt","fmt","from","from","from","into","into","print","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","solve_board","time","LoggingSolver","Solver","StepLoggingSolver","StepSolver","init","solve","solve_board","solve_with_logs","step","step","btr","psr","utils","backtracker","Backtracker","Grid","backtrack_solve","borrow","borrow","borrow_mut","borrow_mut","fmt","from","from","from","guess_idxs","index","index_mut","init","into","into","solve","try_from","try_from","try_into","try_into","type_id","type_id","core","area","cell","filter","grid","idx","num","section","FoldedArea","apply_masks","borrow","borrow_mut","count","double_lines","from","get_filters","into","new","single_lines","try_from","try_into","type_id","update_known","ALL_CANDIDATES","BannedBits","CandidateError","Cell","CellMask","KnownMultipleNum","KnownNoNum","MultipleUniqueCandidates","NoCandidates","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check","clone","clone","clone","clone_into","clone_into","clone_into","default","eq","eq","equivalent","fmt","fmt","fmt","from","from","from","from_known","into","into","into","is_known","new","new","new_known","new_unchecked","new_unchecked","remove_candidates","set_candidates","set_known_bit","single_candidate","to_owned","to_owned","to_owned","to_string","to_u16","to_u16","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","zeroed","Filter","borrow","borrow_mut","clone","clone_into","from","idx","into","mask","new","to_owned","try_from","try_into","type_id","FromStringError","Grid","GridError","apply_filter","apply_filters","borrow","borrow","borrow_mut","borrow_mut","default","eq","equivalent","fmt","fmt","from","from","from","get_cell","get_cell_mut","get_folded_area","get_section","get_sections","into","into","known_filters","try_from","try_from","try_into","try_into","type_id","type_id","unique_candidate","AreaIdx","GridIdx","Idx","InnerIdx","IntoIdx","SectionIdx","TryIntoIdx","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","inner_idxs","inner_idxs","into","new","new_unchecked","section_idxs","section_idxs","to_box_section_idxs","to_box_section_idxs","to_idx","to_owned","to_string","try_from","try_into","try_to_idx","type_id","Num","NumErr","TooBig","Zero","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","from","from","into","into","new","new_unchecked","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Box","Column","Row","Section","SectionInfo","SectionKind","SimdSection","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cells","clone","clone","clone","clone_into","clone_into","clone_into","contains_mask","eq","eq","fmt","fmt","fmt","from","from","from","from","from","grid_idxs","idx","info","into","into","into","into","kind","new","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unique_candidate","boards","time","B1_U_FMT_STR","B1_U_STR","B2_U_STR","time"],"q":[[0,"sudoxu"],[5,"sudoxu::board"],[29,"sudoxu::prelude"],[31,"sudoxu::solver"],[41,"sudoxu::solvers"],[44,"sudoxu::solvers::btr"],[45,"sudoxu::solvers::btr::backtracker"],[69,"sudoxu::solvers::psr"],[70,"sudoxu::solvers::psr::core"],[77,"sudoxu::solvers::psr::core::area"],[92,"sudoxu::solvers::psr::core::cell"],[154,"sudoxu::solvers::psr::core::filter"],[168,"sudoxu::solvers::psr::core::grid"],[200,"sudoxu::solvers::psr::core::idx"],[231,"sudoxu::solvers::psr::core::num"],[258,"sudoxu::solvers::psr::core::section"],[316,"sudoxu::solvers::utils"],[318,"sudoxu::solvers::utils::boards"],[321,"sudoxu::solvers::utils::time"],[322,"core::fmt"],[323,"core::fmt"],[324,"core::result"],[325,"core::any"],[326,"core::option"],[327,"alloc::vec"],[328,"core::convert"]],"d":["I/O representation of sudoku boards.","Prelude module, used for easy access to solvers and …","The root <code>Solver</code> trait, implemented for all types which can …","Sudoku solver categories and utilities.","Prints how long the inner block took to execute.","I/O version of the sudoku board. Each byte is guaranteed …","<code>Board</code> related errors.","Error parsing an <code>&amp;str</code> into a <code>Board</code>.","","","","","Prints <code>self</code> using the <code>Debug</code> trait.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Prints <code>self</code> using the <code>Display</code> trait.","","","Parses a <code>String</code> into a Board. The parsing ignores any <code>char</code>…","","","","","","","","A solver which logs its solution to the sudoku.","A sudoku solver.","A solver that steps through its process of solving the …","A sudoku solver that shows its steps into solving the …","Initialize <code>self</code> from a Board.","Compute the solution and return the solved board.","Parses the <code>&amp;str</code> into a <code>Board</code> and solves it with the …","Solves the board while producing logs of each step.","Computes the following step towards solving the sudoku. …","Solves the board one step a time.","Backtracking (BTR) Solvers","Phase Space Reduction (PSR) Solvers","Utilities common to all solver categories, such as testing.","Simple backtracking solver","Backtracking solver","Grid","Solves the grid by backtracking","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Finds all of the indexes of the cells that are unknown. …","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Core functionality for PSR solvers.","Adjacent <code>Sections</code> forming a third of the board.","The cells in a sudoku grid.","Filter type, used to remove candidates from <code>Cells</code>.","The sudoku board.","Safe indexing into comptime known arrays.","Representation of a known number within a <code>Cell</code>: <code>1 &lt;= N &lt;= 9</code>…","A row, column, or box within the grid.","An <code>Area</code> whose squares have been projected into columns. …","Applies the current masks to itself. Used after masks have …","","","Creates a mask representing if each candidate within a …","Checks for candidate projections in double lines. Updates …","Returns the argument unchanged.","Turns inner masks into Filters. Some filters may be …","Calls <code>U::from(self)</code>.","Creates a new <code>FoldedArea</code>.","Checks for candidate projections in single lines. Returns …","","","","Uses the <code>Grid</code> to try to filter candidates further. …","Inner value of a <code>Cell</code> representing all candidates being …","Bits set within the banned sector.","Errors relating to a Cell’s candidates.","A cell within the grid. Holds information about what …","Used to remove multiple candidates from a <code>Cell</code>. Will …","Known bit is set but multiple candidates are also set.","Known bit is set but no candidates are set.","Cell has multiple unique candidates within its Sections. …","Cell contains no candidates/value.","","","","","","","Checks if a given <code>Cell</code> has an allowed representation.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a <code>CellMask</code> with an inner <code>u16</code> equal to that of a …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether the known bit is set.","Creates a new <code>Cell</code> from an inner <code>u16</code>. Returns a …","Creates a <code>CellMask</code> from a <code>u16</code>. Returns <code>None</code> if bits …","Creates a Cell with a known value from a Num.","Creates a new <code>Cell</code>, which can either contain multiple …","Creates a <code>CellMask</code> from a <code>u16</code>. Does not check the …","Removes the candidate bits set in the mask from the cell.","Adds the set candidate bits in the <code>CellMask</code> to the <code>Cell</code>.","Sets the known bit of the given cell.","Checks if a <code>Cell</code> is not known and only contains a single …","","","","","Returns the inner <code>u16</code> within the Cell.","Returns the inner <code>u16</code>.","","","","","","","","","","Wrapper for <code>Cell::new_unchecked(0)</code>","A <code>CellMask</code> and <code>GridIdx</code> pair. Used for removing candidates …","","","","","Returns the argument unchanged.","The <code>Cell</code>’s <code>GridIdx</code> where the mask should be applied.","Calls <code>U::from(self)</code>.","The <code>CellMask</code> to apply.","Creates a new <code>Filter</code>.","","","","","Error in parsing a <code>String</code> into a <code>Grid</code>.","The sudoku board for PSR solvers.","Grid-related errors","Remove candidates at the specified location.","Remove candidates at the specified locations in the Grid. …","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get a copy of the <code>Cell</code> the given index.","Get a mutable reference to the <code>Cell</code> at the given index.","Constructs the <code>FoldedArea</code> at the location specified by the …","Returns (a copy of) the specified <code>Section</code>.","Returns (copies of) the <code>Sections</code> of the <code>Cell</code> at the given …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates filters for the neighbours of a cell when its …","","","","","","","Checks if a <code>Cell</code> contains a unique candidate within its …","An index into the <code>Area</code>s of the grid.","An index into the cells of a grid:","A generic indexing type used to safely access comptime …","An index into a <code>Section</code>’s inner Cells. For rows(columns) …","Unsafe uint -&gt; Idx conversion.","An index into the sections of a grid. For rows and …","Safe uint -&gt; Idx conversion.","","","","","","","","Returns the argument unchanged.","Returns the <code>InnerIdx</code>s associated to the given <code>GridIdx</code>, …","Returns the <code>InnerIdx</code>s associated to the given <code>GridIdx</code>, …","Calls <code>U::from(self)</code>.","Tries to create an <code>Idx&lt;N&gt;</code> from a <code>uint</code>. Returns None if the …","Create an <code>Idx&lt;N&gt;</code> from a <code>usize</code>.","Returns the <code>SectionIdx</code>s associated to the given <code>GridIdx</code>, …","Returns the <code>SectionIdx</code>s associated to the given <code>GridIdx</code>, …","Returns the three <code>SectionIdxs</code> of the three boxes that make …","Returns the three <code>SectionIdxs</code> of the three boxes that make …","Casts a uint into an <code>Idx&lt;N&gt;</code>, without performing the bounds …","","","","","Tries to cast a uint into an <code>Idx&lt;N&gt;</code>. Returns <code>None</code> if <code>self</code> …","","A known number within a <code>Cell</code>, satisfying <code>1 &lt;= N &lt;= 9</code>.","<code>Num</code>-related errors.","<code>n &gt; 9</code>","<code>n == 0</code>","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a <code>Num</code> from a <code>u8</code>. Returns an error if <code>n</code> is not in …","Creates a <code>Num</code> from a <code>u8</code>. Does not apply the bounds check.","","","","","","","","Box: 3x3 square within the grid.","Column: Vertical line within the grid.","Row: Horizontal line within the grid.","A row, column, or box of <code>Cells</code>.","Information to identify a Section within the grid.","An enum for representing the kinds of <code>Sections</code>.","A SIMD-compatible version of a Section.","","","","","","","","","The underlying array of <code>Cells</code>.","","","","","","","Checks inner <code>Cells</code> for containing <code>n</code> as a candidate, and …","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the grid indexes of the provided section.","What (section) index is it.","The information linking to what <code>Section</code> within the <code>Grid</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","What kind of <code>Section</code> is it.","Create a new <code>SectionInfo</code>.","","","","","","","","","","","","","","","","Finds if the <code>Cell</code> at <code>inner_idx</code> contains a candidate found …","I/O Boards to test solvers and formatting.","Timing macro.","Board 01 unsolved as <code>board.to_string()</code>.","Board 01 (Easy) Unsolved, as <code>&amp;str</code>.","Board 02 (Insane) Unsolved, as <code>&amp;str</code>.","Prints how long the inner block took to execute."],"i":[0,0,0,0,0,0,0,9,1,9,1,9,1,1,1,1,1,9,1,9,1,1,1,1,9,1,9,1,9,0,0,0,0,0,0,38,38,0,39,40,41,0,0,0,0,0,0,4,13,4,13,4,4,13,4,4,4,4,4,13,13,4,13,13,4,13,4,13,4,0,0,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,22,0,0,0,22,22,22,22,21,22,23,21,22,23,21,21,22,23,21,22,23,21,21,22,21,21,21,22,21,22,23,23,21,22,23,21,21,23,21,21,23,21,21,21,21,21,22,23,21,21,23,21,22,23,21,22,23,21,22,23,21,0,18,18,18,18,18,18,18,18,18,18,18,18,18,27,0,0,20,20,20,27,20,27,20,20,20,20,27,20,20,27,20,20,20,20,20,20,27,20,20,27,20,27,20,27,20,0,0,0,0,0,0,0,30,30,30,30,30,30,30,30,25,30,30,30,30,25,30,19,30,42,30,30,30,30,43,30,0,0,34,34,24,34,24,34,24,24,24,24,24,34,24,34,24,34,24,24,24,24,34,24,34,24,34,36,36,36,0,0,0,0,37,29,28,36,37,29,28,36,29,29,28,36,29,28,36,37,28,36,29,28,36,37,37,29,28,36,28,28,29,37,29,28,36,28,28,29,28,36,37,29,28,36,37,29,28,36,37,29,28,36,29,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1],[[1,2],3],[[1,2],3],[4,1],[[]],[[]],[[]],[[]],[1],[[],5],[[],6],[7,[[6,[1]]]],[[],6],[[],6],[[],6],[[],8],[[],8],0,0,0,0,0,0,[1],[[],1],[7,[[6,[1,9]]]],[[]],[[],[[10,[1]]]],[[],10],0,0,0,0,0,0,[4],[[]],[[]],[[]],[[]],[[4,2],3],[[]],[[]],[1,4],[4,[[12,[11]]]],[[4,11]],[[4,11]],[1,13],[[]],[[]],[13,1],[[],6],[[],6],[[],6],[[],6],[[],8],[[],8],0,0,0,0,0,0,0,0,0,[14],[[]],[[]],[14,[[16,[15]]]],[14,17],[[]],[14,[[16,[18]]]],[[]],[[[16,[[16,[15]]]],[16,[15]],19],14],[14,17],[[],6],[[],6],[[],8],[[14,20],17],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[21,[[6,[22]]]],[21,21],[22,22],[23,23],[[]],[[]],[[]],[[],21],[[21,21],17],[[22,22],17],[[],17],[[21,2],3],[[21,2],3],[[22,2],3],[[]],[[]],[[]],[24,23],[[]],[[]],[[]],[21,17],[15,[[6,[21,22]]]],[15,[[10,[23]]]],[24,21],[15,21],[15,23],[[21,23]],[[21,23]],[21],[21,[[10,[24]]]],[[]],[[]],[[]],[[],5],[21,15],[23,15],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],8],[[],8],[[],8],[[],21],0,[[]],[[]],[18,18],[[]],[[]],0,[[]],0,[[23,25],18],[[]],[[],6],[[],6],[[],8],0,0,0,[[20,18]],[[20,[26,[18]]]],[[]],[[]],[[]],[[]],[[],20],[[20,20],17],[[],17],[[20,2],3],[[27,2],3],[1,20],[[]],[[]],[[20,25],21],[[20,25],21],[[20,19],14],[[20,28],29],[[20,25],[[16,[29]]]],[[]],[[]],[[24,25],[[16,[18]]]],[[],6],[[],6],[[],6],[[],6],[[],8],[[],8],[[20,25],[[6,[[10,[24]],22]]]],0,0,0,0,0,0,0,[[]],[[]],[30,30],[[]],[[30,30],17],[[30,2],3],[[30,2],3],[[]],[25,[[16,[31]]]],[30,[[16,[31]]]],[[]],[[[32,[11]]],[[10,[30]]]],[[[32,[11]]],30],[25,[[16,[33]]]],[30,[[16,[33]]]],[19,[[16,[33]]]],[30,[[16,[33]]]],[[],30],[[]],[[],5],[[],6],[[],6],[[],[[10,[30]]]],[[],8],0,0,0,0,[[]],[[]],[[]],[[]],[24,24],[[]],[[24,24],17],[[],17],[[24,2],3],[[34,2],3],[[]],[[]],[[]],[[]],[35,[[6,[24,34]]]],[35,24],[[]],[[],6],[[],6],[[],6],[[],6],[[],8],[[],8],0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[29,29],[28,28],[36,36],[[]],[[]],[[]],[[37,24],15],[[28,28],17],[[36,36],17],[[29,2],3],[[28,2],3],[[36,2],3],[[]],[29,37],[[]],[[]],[[]],[28,[[16,[25]]]],0,0,[[]],[[]],[[]],[[]],0,[[36,33],28],[[]],[[]],[[]],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],6],[[],8],[[],8],[[],8],[[],8],[[29,31],[[6,[[10,[24]],22]]]],0,0,0,0,0,0],"c":[],"p":[[3,"Board",5],[3,"Formatter",322],[6,"Result",322],[3,"Grid",45],[3,"String",323],[4,"Result",324],[15,"str"],[3,"TypeId",325],[4,"BoardError",5],[4,"Option",326],[15,"usize"],[3,"Vec",327],[3,"Backtracker",45],[3,"FoldedArea",77],[15,"u16"],[15,"array"],[15,"bool"],[3,"Filter",154],[6,"AreaIdx",200],[3,"Grid",168],[3,"Cell",92],[4,"CandidateError",92],[3,"CellMask",92],[3,"Num",231],[6,"GridIdx",200],[15,"slice"],[4,"GridError",168],[3,"SectionInfo",258],[3,"Section",258],[3,"Idx",200],[6,"InnerIdx",200],[8,"Into",328],[6,"SectionIdx",200],[4,"NumErr",231],[15,"u8"],[4,"SectionKind",258],[3,"SimdSection",258],[8,"Solver",31],[8,"LoggingSolver",31],[8,"StepSolver",31],[8,"StepLoggingSolver",31],[8,"IntoIdx",200],[8,"TryIntoIdx",200]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
