var searchIndex = JSON.parse('{\
"sudoxu":{"doc":"Sudoxu","t":"AAADLLLLLLLIKKAAAAAAAAAAAANEDNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNDELLLLLLLLLLLLLLLLLLLLLLLLLDIILLLLLLLLALLLLLLLLLLLLGGGLLDENNLLLLLLLLLLLLLLLLLLLLLLLNNNDDELLLLLLMLLLLLLLLLLLLLMMLLLMLLLLLLLLLLLLLARR","n":["board","solver","solvers","Board","borrow","borrow_mut","from","into","try_from","try_into","type_id","Solver","init","solve","btr","psr","utils","core","filters","finders","structs","cell","grid","idx","num","section","BannedBits","CandidateError","Cell","KnownMultipleNum","KnownNoNum","MultipleUniqueCandidates","NoCandidates","ParseError","borrow","borrow","borrow_mut","borrow_mut","check","clone","clone","clone_into","clone_into","default","eq","eq","equivalent","fmt","fmt","fmt","from","from","into","into","is_known","new","new_known","new_unchecked","remove_candidates","set_candidates","set_known","single_candidate","to_owned","to_owned","to_string","to_u16","try_from","try_from","try_into","try_into","type_id","type_id","zerod","FromStringError","Grid","GridError","borrow","borrow","borrow_mut","borrow_mut","default","fmt","fmt","from","from","get","get_mut","into","into","known_cell_update_neighbours","section","sections","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","unique_candidate","Idx","IntoIdx","TryIntoIdx","borrow","borrow_mut","clone","clone_into","eq","fmt","fmt","from","idxs","inner_idxs","into","new","new_unchecked","section_idxs","to_idx","to_owned","to_string","try_from","try_into","try_to_idx","type_id","GridIdx","InnerIdx","SectionIdx","inner_idxs","section_idxs","Num","NumErr","TooBig","Zero","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","eq","equivalent","fmt","fmt","from","from","into","into","new","new_unchecked","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Box","Column","Row","Section","SectionInfo","SectionKind","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cells","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","from","from","from","grid_idxs","idx","info","into","into","into","kind","new","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","unique_candidate","boards","SUDOKU_1_UNSOLVED_FMT_STR","SUDOKU_1_UNSOLVED_STR"],"q":[[0,"sudoxu"],[3,"sudoxu::board"],[11,"sudoxu::solver"],[14,"sudoxu::solvers"],[17,"sudoxu::solvers::psr"],[18,"sudoxu::solvers::psr::core"],[21,"sudoxu::solvers::psr::core::structs"],[26,"sudoxu::solvers::psr::core::structs::cell"],[73,"sudoxu::solvers::psr::core::structs::grid"],[101,"sudoxu::solvers::psr::core::structs::idx"],[125,"sudoxu::solvers::psr::core::structs::idx::idxs"],[130,"sudoxu::solvers::psr::core::structs::num"],[157,"sudoxu::solvers::psr::core::structs::section"],[202,"sudoxu::solvers::utils"],[203,"sudoxu::solvers::utils::boards"],[205,"core::result"],[206,"core::any"],[207,"core::fmt"],[208,"core::fmt"],[209,"alloc::string"],[210,"core::convert"]],"d":["I/O representation of sudoku boards.","The root <code>Solver</code> trait, implemented for all types which can …","Sudoku solvers, categorized by underlying data structure …","I/O version of the sudoku board. Each byte is guaranteed …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","A sudoku solver.","Initialize self","Solve the sudoku and return the solved board.","Backtracking (BTR) Solvers","Phase Space Reduction (PSR) Solvers","","","Methods that remove candidates from the board","(methods here are taken to their underlying type) manual …","Structs representing various parts of a sudoku grid, along …","The cells in a sudoku grid.","the sudoku grid","safe indexing into comptime known arrays","the known value within a cell. <code>1 &lt;= N &lt;= 9</code>.","A row, column, or box within the grid. Internally a …","Bits set within the banned sector. <code>Cell &gt;= 1024 ( = 2^10 )</code>","Errors relating to a Cell’s candidates.","A cell within the grid. Holds information about what …","Known bit is set but multiple candidates are also set. …","Known bit is set but no candidates are set. <code>Cell == 1</code>","Cell has multiple unique candidates within its sections. …","Cell contains no candidates. <code>Cell == 0</code>","Error when parsing a Cell from a String.","","","","","Checks if a given <code>Cell</code> has an allowed representation.","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns whether the known bit is set.","Creates a new <code>Cell</code> from an inner <code>u16</code>. Returns a …","Creates a Cell with a known value from a Num.","Creates a new <code>Cell</code>, which can either contain multiple …","Removes the candidate bits set in the mask from the cell.","Adds the set candidate bits in the <code>CellMask</code> to the <code>Cell</code>.","Sets the known bit of the given cell.","Checks if a <code>Cell</code> is not known and only contains a single …","","","","Returns the inner <code>u16</code> within the Cell.","","","","","","","Wrapper for <code>Cell::new_unchecked(0)</code>","Error in parsing a <code>String</code> into a <code>Grid</code>.","The sudoku Grid.","Grid-related errors","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Get a copy of the <code>Cell</code> the given index.","Get a mutable reference to the <code>Cell</code> at the given index.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Update the neighbours (all remaining <code>Cell</code>s in each <code>Section</code>…","Returns (a copy of) the specified <code>Section</code>.","Returns (copies of) the <code>Section</code>s of the <code>Cell</code> at the given …","","Attempts to convert a <code>String</code> into a Grid. Ignores any non …","","","","","","","Checks if a <code>Cell</code> contains a unique candidate within its …","A number <code>x</code> guaranteed to satisfy <code>x &lt; N</code>. Used for indexing …","uint -&gt; Idx","Safe “uint” -&gt; Idx","","","","","","","","Returns the argument unchanged.","Concrete <code>Idx</code>s for use within Sudoku solving.","Returns the <code>InnerIdx</code>s associated to the given <code>GridIdx</code>, …","Calls <code>U::from(self)</code>.","Tries to create an <code>Idx&lt;N&gt;</code> from a <em>uint</em>. Returns None if the …","Create an <code>Idx&lt;N&gt;</code> from a <code>usize</code>.","Returns the <code>SectionIdx</code>s associated to the given <code>GridIdx</code>, …","Casts a uint into an <code>Idx&lt;N&gt;</code>, without performing the bounds …","","","","","Tries to cast a uint into an <code>Idx&lt;N&gt;</code>. Returns <code>None</code> if <code>self</code> …","","An index into the cells of a grid:","An index into a <code>Section</code>’s Cells. For rows(columns) these …","An index into the sections of a grid. For rows and …","Returns the <code>InnerIdx</code>s associated to the given <code>GridIdx</code>, …","Returns the <code>SectionIdx</code>s associated to the given <code>GridIdx</code>, …","A known number within a <code>Cell</code>, satisfying <code>1 &lt;= N &lt;= 9</code>.","<code>Num</code>-related errors.","<code>n &gt; 9</code>","<code>n == 0</code>","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a <code>Num</code> from a <code>u8</code>. Returns an error if <code>n</code> is not in …","Creates a <code>Num</code> from a <code>u8</code>. Does not apply the bounds check.","","","","","","","","Box: 3x3 square within the grid.","Column: Vertical line within the grid.","Row: Horizontal line within the grid.","A row, column, or box of <code>Cell</code>s.","Information to identify a Section within the grid.","An enum for representing the kinds of <code>Section</code>s.","","","","","","","The underlying array of <code>Cell</code>s.","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the grid indexes of the provided section.","What (section) index is it.","The information linking to what <code>Section</code> within the <code>Grid</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","What kind of <code>Section</code> is it.","Create a new <code>SectionInfo</code>.","","","","","","","","","","","","Finds if the <code>Cell</code> at <code>inner_idx</code> contains a candidate found …","","",""],"i":[0,0,0,0,3,3,3,3,3,3,3,0,27,27,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,5,5,5,5,5,4,5,4,5,4,4,5,4,5,4,4,5,4,4,4,5,4,5,4,5,4,4,4,4,4,4,4,4,4,5,4,4,4,5,4,5,4,5,4,14,0,0,13,14,13,14,13,13,14,13,14,13,13,13,14,13,13,13,13,13,13,14,13,14,13,14,13,0,0,0,19,19,19,19,19,19,19,19,0,19,19,19,19,19,28,19,19,19,19,29,19,0,0,0,15,15,0,0,24,24,10,24,10,24,10,10,10,10,10,24,10,24,10,24,10,10,10,10,24,10,24,10,24,26,26,26,0,0,0,17,16,26,17,16,26,17,16,26,16,26,16,26,17,16,26,17,16,26,16,16,17,17,16,26,16,16,16,26,17,16,26,17,16,26,17,16,26,17,0,0,0],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[],1],[[],1],[[],2],0,[3],[[],3],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[4,[[1,[5]]]],[4,4],[5,5],[[]],[[]],[[],4],[[4,4],6],[[5,5],6],[[],6],[[4,7],8],[[4,7],8],[[5,7],8],[[]],[[]],[[]],[[]],[4,6],[9,[[1,[4,5]]]],[10,4],[9,4],0,0,[4],[4,[[11,[10]]]],[[]],[[]],[[],12],[4,9],[[],1],[[],1],[[],1],[[],1],[[],2],[[],2],[[],4],0,0,0,[[]],[[]],[[]],[[]],[[],13],[[13,7],8],[[14,7],8],[[]],[[]],[[13,15],4],[[13,15],4],[[]],[[]],[[13,15]],[[13,16],17],[[13,15],[[18,[17]]]],[[],12],[12,[[1,[13]]]],[[],1],[[],1],[[],1],[[],1],[[],2],[[],2],[[13,15],[[1,[[11,[10]],5]]]],0,0,0,[[]],[[]],[19,19],[[]],[[19,19],6],[[19,7],8],[[19,7],8],[[]],0,[19,[[18,[20]]]],[[]],[[[22,[21]]],[[11,[19]]]],[[[22,[21]]],19],[19,[[18,[23]]]],[[],19],[[]],[[],12],[[],1],[[],1],[[],[[11,[19]]]],[[],2],0,0,0,[15,[[18,[20]]]],[15,[[18,[23]]]],0,0,0,0,[[]],[[]],[[]],[[]],[10,10],[[]],[[10,10],6],[[],6],[[10,7],8],[[24,7],8],[[]],[[]],[[]],[[]],[25,[[1,[10,24]]]],[25,10],[[]],[[],1],[[],1],[[],1],[[],1],[[],2],[[],2],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[16,16],[26,26],[[]],[[]],[[16,16],6],[[26,26],6],[[17,7],8],[[16,7],8],[[26,7],8],[[]],[[]],[[]],[16,[[18,[15]]]],0,0,[[]],[[]],[[]],0,[[26,23],16],[[]],[[]],[[],1],[[],1],[[],1],[[],1],[[],1],[[],1],[[],2],[[],2],[[],2],[[17,20],[[1,[[11,[10]],5]]]],0,0,0],"c":[],"p":[[4,"Result",205],[3,"TypeId",206],[3,"Board",3],[3,"Cell",26],[4,"CandidateError",26],[15,"bool"],[3,"Formatter",207],[6,"Result",207],[15,"u16"],[3,"Num",130],[4,"Option",208],[3,"String",209],[3,"Grid",73],[4,"GridError",73],[6,"GridIdx",125],[3,"SectionInfo",157],[3,"Section",157],[15,"array"],[3,"Idx",101],[6,"InnerIdx",125],[15,"usize"],[8,"Into",210],[6,"SectionIdx",125],[4,"NumErr",130],[15,"u8"],[4,"SectionKind",157],[8,"Solver",11],[8,"IntoIdx",101],[8,"TryIntoIdx",101]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
